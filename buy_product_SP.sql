CREATE PROCEDURE IF NOT EXISTS buy_product(	IN id_product_buy INT,	IN id_user_buy INT,	IN meses INT)BEGIN 	DECLARE costo_producto DECIMAL(19,2);	DECLARE factor_def DECIMAL(19,2);	DECLARE costo_mas_factor DECIMAL(19,2);	SET factor_def := 0.8;	SET costo_producto := (SELECT costo FROM PRODUCTOS WHERE id_producto = id_product_buy); 	SET costo_mas_factor := (costo_producto * factor_def) + costo_producto;	INSERT INTO ABONO(		fecha_limite,		factor,		total_meses,		abono_mensual,		pagado,		id_usuario,		id_producto	) 	VALUES(		DATE(DATE_ADD(now(), INTERVAL 1 MONTH)),		factor_def,		costo_mas_factor,		costo_mas_factor / meses,		false,		id_user_buy,		id_product_buy	);	SELECT * FROM ABONO;END;CREATE PROCEDURE IF NOT EXISTS add_abono(	IN abonar DECIMAL(19,2),	IN id_abono_cuenta INT)BEGIN	DECLARE buscar_abono DECIMAL(19,2);	DECLARE fecha_limite_abonar DATE;	DECLARE pago_completado BOOLEAN;          DECLARE liquidar DECIMAL(19,2);	DECLARE usuario INT;	  DECLARE new_payment DECIMAL(19,2);		SET buscar_abono := (SELECT abono_mensual FROM ABONO		WHERE id_abono = id_abono_cuenta);	SET liquidar := (SELECT total_meses FROM ABONO				WHERE id_abono = id_abono_cuenta);	SET fecha_limite_abonar := (SELECT fecha_limite FROM ABONO 		WHERE id_abono = id_abono_cuenta);	SET pago_completado := (SELECT pagado FROM ABONO		WHERE id_abono = id_abono_cuenta);	  SET usuario := (SELECT id_usuario FROM ABONO		  WHERE id_abono = id_abono_cuenta);	IF (pago_completado = true) THEN 		SELECT CONCAT('La cuenta ya esta saldada') AS MENSAJE;	ELSEIF abonar < buscar_abono THEN		SELECT CONCAT(			'El total a abonar no esta completo: $', 			abonar,			' , el total a abonar es de: $',			buscar_abono		)  AS MENSAJE;	ELSEIF  abonar > liquidar THEN		SELECT 'Si quieres liquidar procura que el abono sea igual al total y no mayot' AS MENSAJE;	ELSEIF  DATE_FORMAT( NOW() ,"%Y-%m-%d 00:00:00") <= DATE_FORMAT(fecha_limite_abonar,"%Y-%m-%d 00:00:00") THEN 			UPDATE ABONO 			  SET total_meses =  total_meses - abonar, 				   fecha_limite =  DATE(DATE_ADD(fecha_limite, INTERVAL 1 MONTH))			  WHERE id_abono = id_abono_cuenta;			  SET new_payment := (SELECT total_meses FROM ABONO WHERE id_abono = id_abono_cuenta);		           CALL generar_reporte(					usuario, 					id_abono_cuenta,					new_payment);			  SELECT 'ABONO REALIZADO' AS MENSAJE;			  SELECT * FROM ABONO WHERE id_abono = id_abono_cuenta;	ELSEIF DATE_FORMAT(NOW(), "%Y-%m-%d 00:00:00") > DATE_FORMAT(fecha_limite_abonar, "%Y-%m-%d 00:00:00") THEN 		UPDATE ABONO 		SET ABONO.total_meses = + (ABONO.total_meses * ABONO.factor)	         WHERE id_abono = id_abono_cuenta;		UPDATE ABONO 			  SET total_meses = total_meses - abonar, 				   fecha_limite =  DATE(DATE_ADD(fecha_limite, INTERVAL 1 MONTH))			  WHERE id_abono = id_abono_cuenta;		  SET new_payment := (SELECT total_meses FROM ABONO WHERE id_abono = id_abono_cuenta);		  CALL generar_reporte(					usuario, 					id_abono_cuenta,					new_payment);		SELECT CONCAT('PAGO CON RETARDO' ) AS MENSAJE;	END IF;END;CREATE TRIGGER IF NOT EXISTS validate_payment	AFTER UPDATE ON ABONO	FOR EACH ROW		BEGIN		  IF NEW.total_meses = 0 THEN		  	UPDATE ABONO 			SET ABONO.pagado = true 			WHERE ABONO.id_abono = OLD.id_abono; 		  END IF;END;CREATE TABLE IF NOT EXISTS reporte_abono(	id_reporte INT NOT NULL PRIMARY KEY AUTO_INCREMENT,	fecha_abono DATE NOT NULL DEFAULT NOW(),	id_usuario INT NOT NULL,	id_abono INT NOT NULL,	abono_restante DECIMAL(19,2));CREATE PROCEDURE IF NOT EXISTS generar_reporte(	IN id_usuario_report INT,	 IN id_abono_report INT,	  IN abono_restante_report INT)BEGIN	INSERT INTO reporte_abono (		id_usuario,		id_abono,		abono_restante					) VALUES(		id_usuario_report,		id_abono_report,		abono_restante_report	);END;/*ALTER TABLE reporte_abono	ADD CONSTRAINT fk_usuario		FOREIGN KEY(id_usuario)		  REFERENCES USUARIOS(id_usuario);ALTER TABLE reporte_abono	ADD CONSTRAINT fk_abono		FOREIGN KEY(id_abono)			REFERENCES ABONO(id_abono);CREATE TRIGGER IF NOT EXISTS guardar_reporte	AFTER UPDATE ON ABONO		FOR EACH ROW 			BEGIN				INSERT INTO reporte_abono (	id_usuario,	id_abono,	abono_restante				) VALUES(	OLD.id_usuario,	  ABONO.id,	 NEW.total_meses);END;*/			